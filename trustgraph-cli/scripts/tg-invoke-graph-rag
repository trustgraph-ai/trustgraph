#!/usr/bin/env python3

"""
Uses the GraphRAG service to answer a question
"""

import argparse
import os
from trustgraph.api import Api

default_url = os.getenv("TRUSTGRAPH_URL", 'http://localhost:8088/')
default_user = 'trustgraph'
default_collection = 'default'

def question(
        url, question, user, collection, entity_limit, triple_limit,
        subgraph_limit
):

    rag = Api(url)

    resp = rag.graph_rag(
        question=question, user=user, collection=collection,
        entity_limit=entity_limit, triple_limit=triple_limit,
        subgraph_limit=subgraph_limit
    )

    print(resp)

def main():

    parser = argparse.ArgumentParser(
        prog='tg-invoke-graph-rag',
        description=__doc__,
    )

    parser.add_argument(
        '-u', '--url',
        default=default_url,
        help=f'API URL (default: {default_url})',
    )

    parser.add_argument(
        '-q', '--question',
        required=True,
        help=f'Question to answer',
    )

    parser.add_argument(
        '-U', '--user',
        default=default_user,
        help=f'User ID (default: {default_user})'
    )

    parser.add_argument(
        '-C', '--collection',
        default=default_collection,
        help=f'Collection ID (default: {default_collection})'
    )

    parser.add_argument(
        '-e', '--entity-limit',
        default=default_entity_limit,
        help=f'Entity limit (default: {default_entity_limit})'
    )

    parser.add_argument(
        '-t', '--triple-limit',
        default=default_triple_limit,
        help=f'Triple limit (default: {default_triple_limit})'
    )

    parser.add_argument(
        '-s', '--subgraph-limit',
        default=default_subgraph_limit,
        help=f'Subgraph limit (default: {subgraph_limit})'
    )

    args = parser.parse_args()

    try:

        question(
            url=args.url,
            question=args.question,
            user=args.user,
            collection=args.collection,
            entity_limit=args.entity_limit,
            triple_limit=args.triple_limit,
            subgraph_limit=args.subgraph_limit,
        )

    except Exception as e:

        print("Exception:", e, flush=True)

main()

